// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Calculators.Spec.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SimpleCalculatorFeature : object, Xunit.IClassFixture<SimpleCalculatorFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SimpleCalculator.feature"
#line hidden
        
        public SimpleCalculatorFeature(SimpleCalculatorFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SimpleCalculator", "In order to perform basic arithmetic operations\nAs a developer\nI want to use the " +
                    "concrete SimpleCalculator class", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add two positive numbers")]
        [Xunit.TraitAttribute("FeatureTitle", "SimpleCalculator")]
        [Xunit.TraitAttribute("Description", "Add two positive numbers")]
        [Xunit.InlineDataAttribute("2", "3", "5", new string[0])]
        [Xunit.InlineDataAttribute("0", "0", "0", new string[0])]
        [Xunit.InlineDataAttribute("0.5", "0.5", "1", new string[0])]
        [Xunit.InlineDataAttribute("-1", "1", "0", new string[0])]
        [Xunit.InlineDataAttribute("-2", "-3", "-5", new string[0])]
        [Xunit.InlineDataAttribute("10000", "20000", "30000", new string[0])]
        public async System.Threading.Tasks.Task AddTwoPositiveNumbers(string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two positive numbers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
        await testRunner.WhenAsync(string.Format("I call Add with arguments {0} and {1}", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
        await testRunner.ThenAsync(string.Format("the returned value should be {0}", c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Subtract two numbers")]
        [Xunit.TraitAttribute("FeatureTitle", "SimpleCalculator")]
        [Xunit.TraitAttribute("Description", "Subtract two numbers")]
        [Xunit.InlineDataAttribute("2", "3", "-1", new string[0])]
        [Xunit.InlineDataAttribute("0", "0", "0", new string[0])]
        [Xunit.InlineDataAttribute("0.5", "0.5", "0", new string[0])]
        [Xunit.InlineDataAttribute("-1", "1", "-2", new string[0])]
        [Xunit.InlineDataAttribute("-2", "-3", "1", new string[0])]
        [Xunit.InlineDataAttribute("20000", "10000", "10000", new string[0])]
        public async System.Threading.Tasks.Task SubtractTwoNumbers(string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtract two numbers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 20
        await testRunner.WhenAsync(string.Format("I call Subtract with arguments {0} and {1}", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
        await testRunner.ThenAsync(string.Format("the returned value should be {0}", c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Multiply two numbers")]
        [Xunit.TraitAttribute("FeatureTitle", "SimpleCalculator")]
        [Xunit.TraitAttribute("Description", "Multiply two numbers")]
        [Xunit.InlineDataAttribute("2", "3", "6", new string[0])]
        [Xunit.InlineDataAttribute("0", "0", "0", new string[0])]
        [Xunit.InlineDataAttribute("0.5", "0.5", "0.25", new string[0])]
        [Xunit.InlineDataAttribute("-1", "1", "-1", new string[0])]
        [Xunit.InlineDataAttribute("-2", "-3", "6", new string[0])]
        [Xunit.InlineDataAttribute("10000", "0", "0", new string[0])]
        public async System.Threading.Tasks.Task MultiplyTwoNumbers(string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiply two numbers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
        await testRunner.WhenAsync(string.Format("I call Multiply with arguments {0} and {1}", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
        await testRunner.ThenAsync(string.Format("the returned value should be {0}", c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Divide two numbers")]
        [Xunit.TraitAttribute("FeatureTitle", "SimpleCalculator")]
        [Xunit.TraitAttribute("Description", "Divide two numbers")]
        [Xunit.InlineDataAttribute("6", "3", "2", new string[0])]
        [Xunit.InlineDataAttribute("0", "1", "0", new string[0])]
        [Xunit.InlineDataAttribute("0.5", "0.5", "1", new string[0])]
        [Xunit.InlineDataAttribute("-1", "1", "-1", new string[0])]
        [Xunit.InlineDataAttribute("-6", "-3", "2", new string[0])]
        [Xunit.InlineDataAttribute("10000", "2", "5000", new string[0])]
        public async System.Threading.Tasks.Task DivideTwoNumbers(string a, string b, string c, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("a", a);
            argumentsOfScenario.Add("b", b);
            argumentsOfScenario.Add("c", c);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Divide two numbers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 46
        await testRunner.WhenAsync(string.Format("I call Divide with arguments {0} and {1}", a, b), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
        await testRunner.ThenAsync(string.Format("the returned value should be {0}", c), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Divide by zero")]
        [Xunit.TraitAttribute("FeatureTitle", "SimpleCalculator")]
        [Xunit.TraitAttribute("Description", "Divide by zero")]
        [Xunit.InlineDataAttribute("2", new string[0])]
        [Xunit.InlineDataAttribute("0", new string[0])]
        [Xunit.InlineDataAttribute("0.5", new string[0])]
        [Xunit.InlineDataAttribute("-1", new string[0])]
        [Xunit.InlineDataAttribute("-6", new string[0])]
        [Xunit.InlineDataAttribute("10000", new string[0])]
        public async System.Threading.Tasks.Task DivideByZero(string a, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("a", a);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Divide by zero", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 59
        await testRunner.WhenAsync(string.Format("I call Divide with arguments {0} and 0", a), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
        await testRunner.ThenAsync("a DivideByZeroException should be thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await SimpleCalculatorFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await SimpleCalculatorFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
